heat_template_version: 2015-10-15
description: >
  This template creates one frontend server and two identical backend servers. Frontend server is available to outside world which means can be connected to it from internet. Where as backend servers is only available to frontend server which means only frontend server can connect to backend servers. This template nests another template which creats single VM.  


#command to run the file
#openstack stack create -t server-landscape.yaml --parameter key_name=newKey --parameter public_net=tu-internal ser

#to check outputs:
#openstack stack output show ser --all

#to check status of stack:
#openstack stack list

#to check instances:
#openstack server list

#to delete stack
#openstack stack delete ser


parameters:

    key_name:
        type: string
        label: Key Pair
        constraints:
            - custom_constraint: nova.keypair
    public_net:
        type: string
        description: public network id
resources:

    #Following creates security group allowing inbound connections on port 80 and port 22 

    server_security_group:
        type: OS::Neutron::SecurityGroup
        properties: 
                description: add rules to open port 80 and 22 to security group
                name: security-group
                rules: 
                      - protocol: tcp
                        remote_ip_prefix: 0.0.0.0/0
                        port_range_min: 80
                        port_range_max: 80
                      - protocol: tcp
                        remote_ip_prefix: 0.0.0.0/0
                        port_range_min: 22
                        port_range_max: 22
  #Following creates security group where no traffic allowed from outside world. Port 22 is for ssh connection
    private_security_group:
        type: OS::Neutron::SecurityGroup
        properties: 
                description: private security group where no traffic allowed from outside world
                name: private_security-group
                rules:
                      - protocol: tcp
                        remote_ip_prefix: 0.0.0.0/0
                        port_range_min: 22
                        port_range_max: 22
    
    
                      
#3 different parts of the network : One network, one underlying subnet and one network connecting private network with the public tu-internal network
    private_net:
        type: OS::Neutron::Net
        properties:
          name: private-net

    private_subnet:
        type: OS::Neutron::Subnet
        properties:
          network_id: { get_resource: private_net }
          cidr: 172.16.2.0/24
          gateway_ip: 172.16.2.1    

    router:
       type: OS::Neutron::Router
       properties: 
          external_gateway_info: 
                    network: {get_param: public_net}
  
    router_interface:
       type: OS::Neutron::RouterInterface
       properties:
          router_id: {get_resource: router}
          subnet_id: {get_resource: private_subnet}  
 
          
#frontend_server has server.yaml type. It instantiates VM in a private subnet. 

    frontend_server:
        type: server.yaml
        properties:
                name: frontend_server
                key_name: {get_param : key_name}
                image: ubuntu-16.04                
                flavor: Cloud Computing
                zone: Cloud Computing 2017                
                network: {get_resource: private_net}
                subnetID: {get_resource: private_subnet}
                security_groups: 
                       - {get_resource: server_security_group}
                
   #to associate floating ip to frontend_server
    floating_ip:
        type: OS::Neutron::FloatingIP
        properties: 
              floating_network: {get_param: public_net}

    association: 
        type: OS::Neutron::FloatingIPAssociation
        properties:
                floatingip_id: {get_resource: floating_ip} 
                port_id: {get_attr: [frontend_server, port]}

#backend_servers is a Resource group
    backend_servers:
        type: OS::Heat::ResourceGroup
        properties:
             count: 2
             resource_def: 
                     type: server.yaml
                     properties:
                           name: backend_server_%index%
                           key_name: {get_param : key_name}
                           image: ubuntu-16.04                
                           flavor: Cloud Computing
                           zone: Cloud Computing 2017                
                           network: {get_resource: private_net}
                           subnetID: {get_resource: private_subnet}
                           security_groups: 
                               - {get_resource: private_security_group}
   


outputs:
#    test_out: 
#       value: {get_attr: [frontend_server, port]}
    floating_ip:
      description: floating ip  
      value: {get_attr: [floating_ip,floating_ip_address]}
    frontend_server:
      description: frontend server
      value: {get_attr: [frontend_server,first_address]}
#    backend_servers:
#      description: frontend server
#      value: {get_attr: [frontend_server,first_address]}
